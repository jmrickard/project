#!/bin/bash
#/********************************************************************************
# * (C) Copyright IBM Corporation 2018, 2019.
# *
# * This program and the accompanying materials are made available under the
# * terms of the Eclipse Public License 2.0 which is available at
# * http://www.eclipse.org/legal/epl-2.0.
# *
# * SPDX-License-Identifier: EPL-2.0
# *
# ********************************************************************************/

#####################################################################################
#                                                                                   #
#  Script to switch from Sql Server deployment to Db2 deployment                    #
#                                                                                   #
#  Usage : deployDb2                                                                #
#                                                                                   #
#####################################################################################

set -e

. utils/variables

pushd ..

. ${UTILS_PATH}/functions

if [ ! -e "${IMAGES_PATH}/db2/db2_installer/installation_media/DB2_AWSE_REST_Svr.tar.gz" ]; then
    echo "Error: Cannot find the DB2_AWSE_REST_Svr.tar.gz file in '${IMAGES_PATH}/db2/db2_installer/installation_media'."
    exit 1
fi

if [ ! -e "${IMAGES_PATH}/db2/db2_installer/awse_o/db2/license/db2awse_o.lic" ]; then
    echo "Error: Cannot find the db2awse_o.lic file in '${IMAGES_PATH}/db2/db2_installer/awse_o/db2/license'."
    exit 1
fi

if [ ! -e "${IMAGES_PATH}/db2/base_client/installation_media/DB2_SF_SSLF.tar.gz" ]; then
    echo "Error: Cannot find the DB2_SF_SSLF.tar.gz file in '${IMAGES_PATH}/db2/base_client/installation_media'."
    exit 1
fi

#Update the base configuration with Db2
cp -r "${CONFIG_MODS_PATH}/db2/base/." "${DEFAULT_CONFIG_PATH}"

pushd ${SCRIPTS_PATH}
. copyConfiguration db2
popd

output "Copy the configuration to each container"
#Copy modifications
docker cp "${IMAGES_PATH}/common/zookeeper/configuration/." zookeeper:/opt/IBM/i2analyze/toolkit/configuration
docker cp "${IMAGES_PATH}/common/solr/configuration/." solr:/opt/IBM/i2analyze/toolkit/configuration
docker cp "${IMAGES_PATH}/common/solr2/configuration/." solr2:/opt/IBM/i2analyze/toolkit/configuration

#Change the ownership of the copied files
docker exec -u root zookeeper chown -R i2analyze:i2analyze /opt/IBM/i2analyze/toolkit/configuration
docker exec -u root solr chown -R i2analyze:i2analyze /opt/IBM/i2analyze/toolkit/configuration
docker exec -u root solr2 chown -R i2analyze:i2analyze /opt/IBM/i2analyze/toolkit/configuration

# If the HTTP Server container exists then reset the configuration
contExists="$(containerExists ihs)"
if [[ "$contExists" -eq 1 ]]; then
    docker cp "${IMAGES_PATH}/common/ihs/configuration/." ihs:/opt/IBM/i2analyze/toolkit/configuration
    docker exec -u root ihs chown -R i2analyze:i2analyze /opt/IBM/i2analyze/toolkit/configuration
fi

output "Building db2_installer_image"
docker build -t db2_installer_image ${IMAGES_PATH}/db2/db2_installer
output "Building db2_image"
docker build -t db2_image ${IMAGES_PATH}/db2/db2

output "Building base_client_image"
docker build -t base_client_image ${IMAGES_PATH}/db2/base_client
output "Building liberty_image"
docker build -t liberty_db2_image ${IMAGES_PATH}/db2/liberty
output "Building admin_client_image"
docker build -t admin_client_db2_image ${IMAGES_PATH}/db2/admin_client

output "Building etl_client_image"
docker build -t etl_client_db2_image ${IMAGES_PATH}/db2/etl_client

output "Cleaning up any previously created deployment example containers if they exist."
docker stop sqlserver &>/dev/null || true
docker rm -f db2 admin_client liberty etl_client &>/dev/null || true

output "Running the db2 container on the eia network."
docker run -d --privileged --name db2 -p 50000:50000 -p 50001:50001 --net eianet -u db2inst1 db2_image

output "Waiting to ensure that the db2 server is running"
waitForContainer db2 "DB2START processing was successful"

output "Enter the password that you specified for db.infostore.password in the credentials.properties file"
runCommandUntilSuccess "docker exec -u root -it db2 passwd i2analyze"

output "Running the admin client container on the eia network."
docker run -d --name admin_client --net eianet -u i2analyze admin_client_db2_image
waitForContainer admin_client 'Started'

output "Running the admin_client container to create the database"
docker exec -t -u i2analyze admin_client /opt/IBM/i2analyze/toolkit/scripts/setup -t createDatabases

output "Clear old search index"
docker exec -t -u i2analyze admin_client /opt/IBM/i2analyze/toolkit/scripts/setup -t clearSearchIndex --force --hostname admin_client

output "Running the liberty container on the eia network"
docker run -d --name liberty -p 9082:9082 -p 9445:9445 --net eianet -u i2analyze liberty_db2_image

output "Running the etl client on the eia network"
docker run -d --name etl_client --net eianet -u i2analyze etl_client_db2_image

popd
