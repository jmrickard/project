#!/bin/bash
#/********************************************************************************
# * (C) Copyright IBM Corporation 2018, 2019.
# *
# * This program and the accompanying materials are made available under the
# * terms of the Eclipse Public License 2.0 which is available at
# * http://www.eclipse.org/legal/epl-2.0.
# *
# * SPDX-License-Identifier: EPL-2.0
# *
# ********************************************************************************/

#####################################################################################
#                                                                                   #
#  Script to reset the environment to the default configuration.                    #
#                                                                                   #
#  Usage : resetEnvironment [<dbDialect>]                                           #
#  Defaults to current dialect                                                      #
#                                                                                   #
#####################################################################################

set -e

. utils/variables

pushd ..

. ${UTILS_PATH}/functions

dbDialect=${1:-${DB_DIALECT}}

if [[ $dbDialect != "sqlserver" &&  $dbDialect != "db2" ]]; then
    echo "Error: Unrecognized dialect."
    exit 1
fi

output "Remove the configuration directory on each container"
docker exec admin_client sh -c "rm -rf /opt/IBM/i2analyze/toolkit/configuration/*"
docker exec liberty sh -c "rm -rf /opt/IBM/i2analyze/toolkit/configuration/*"
docker exec zookeeper sh -c "rm -rf /opt/IBM/i2analyze/toolkit/configuration/*"
docker exec solr sh -c "rm -rf /opt/IBM/i2analyze/toolkit/configuration/*"
docker exec solr2 sh -c "rm -rf /opt/IBM/i2analyze/toolkit/configuration/*"

output "Copy the configuration from the src/configuration directory to each container"
#Copy Base Config
docker cp "${BASE_CONFIG_PATH}/." admin_client:/opt/IBM/i2analyze/toolkit/configuration
docker cp "${BASE_CONFIG_PATH}/." liberty:/opt/IBM/i2analyze/toolkit/configuration
docker cp "${BASE_CONFIG_PATH}/." zookeeper:/opt/IBM/i2analyze/toolkit/configuration
docker cp "${BASE_CONFIG_PATH}/." solr:/opt/IBM/i2analyze/toolkit/configuration
docker cp "${BASE_CONFIG_PATH}/." solr2:/opt/IBM/i2analyze/toolkit/configuration

#Reset base configuration
cp -r "${CONFIG_MODS_PATH}/${dbDialect}/base/." "${DEFAULT_CONFIG_PATH}"

#Copy Default Config
pushd ${SCRIPTS_PATH}
. copyConfiguration $dbDialect
popd
docker cp "${IMAGES_PATH}/${dbDialect}/admin_client/configuration/." admin_client:/opt/IBM/i2analyze/toolkit/configuration
docker cp "${IMAGES_PATH}/${dbDialect}/liberty/configuration/." liberty:/opt/IBM/i2analyze/toolkit/configuration
docker cp "${IMAGES_PATH}/common/zookeeper/configuration/." zookeeper:/opt/IBM/i2analyze/toolkit/configuration
docker cp "${IMAGES_PATH}/common/solr/configuration/." solr:/opt/IBM/i2analyze/toolkit/configuration
docker cp "${IMAGES_PATH}/common/solr2/configuration/." solr2:/opt/IBM/i2analyze/toolkit/configuration

#Change the ownership of the copied files
docker exec -u root admin_client chown -R i2analyze:i2analyze /opt/IBM/i2analyze/toolkit/configuration
docker exec -u root liberty chown -R i2analyze:i2analyze /opt/IBM/i2analyze/toolkit/configuration
docker exec -u root zookeeper chown -R i2analyze:i2analyze /opt/IBM/i2analyze/toolkit/configuration
docker exec -u root solr chown -R i2analyze:i2analyze /opt/IBM/i2analyze/toolkit/configuration
docker exec -u root solr2 chown -R i2analyze:i2analyze /opt/IBM/i2analyze/toolkit/configuration

# If HTTP Server exists then reset the configuration
contExists="$(containerExists ihs)"
if [[ "$contExists" -eq 1 ]]; then
    docker exec ihs sh -c "rm -rf /opt/IBM/i2analyze/toolkit/configuration/*"
    docker cp "${IMAGES_PATH}/common/ihs/configuration/." ihs:/opt/IBM/i2analyze/toolkit/configuration
    docker exec -u root ihs chown -R i2analyze:i2analyze /opt/IBM/i2analyze/toolkit/configuration
fi

# Searching and replacing ssl tag, removing clientAuthenticationSupported
docker exec -u i2analyze liberty sh -c "cd /opt/IBM/i2analyze/deploy/wlp/usr/servers/opal-server && \
    sed -i 's/<ssl clientAuthenticationSupported=\"true\" id=\"defaultSSLConfig\"/<ssl id=\"defaultSSLConfig\"/g' server.xml"

# Resetting start extensions
docker exec -u root -it solr sh -c "echo \"/opt/IBM/i2analyze/toolkit/scripts/setup -t startSolrNodes --hostname solr || echo \"Error stating Solr node in solr\"\" > /opt/IBM/startupExt"
docker exec -u root -it solr2 sh -c "echo \"/opt/IBM/i2analyze/toolkit/scripts/setup -t startSolrNodes --hostname solr2 || echo \"Error stating Solr node in solr2\"\" > /opt/IBM/startupExt"
docker exec -u root -it admin_client sh -c "echo \"\" > /opt/IBM/startupExt"
docker exec -u root -it liberty sh -c "echo \"export JAVA_HOME=/opt/IBM/i2analyze/deploy/java && /opt/IBM/i2analyze/toolkit/scripts/setup -t startLiberty || echo \"Error starting Liberty\"\" > /opt/IBM/startupExt"
docker exec -u root -it zookeeper sh -c "echo \"/opt/IBM/i2analyze/toolkit/scripts/setup -t createAndUploadSolrConfig --hostname zookeeeper || echo \"Error stating Zookeeper host in zookeeeper\"\" > /opt/IBM/startupExt"

output "Resetting configuration"
docker exec -u i2analyze liberty /opt/IBM/i2analyze/toolkit/scripts/setup -t stopLiberty

# Resetting the Solr configuration in the Zookeeper server
docker exec -u i2analyze zookeeper /opt/IBM/i2analyze/toolkit/scripts/setup -t createAndUploadSolrConfig --hostname zookeeper

# Restarting zookeeper container
docker exec -u i2analyze zookeeper /opt/IBM/i2analyze/toolkit/scripts/setup -t stopZkHosts --hostname zookeeper
docker exec -u i2analyze zookeeper /opt/IBM/i2analyze/toolkit/scripts/setup -t startZkHosts --hostname zookeeper

# Restarting solr containers
docker exec -u i2analyze solr /opt/IBM/i2analyze/toolkit/scripts/setup -t stopSolrNodes --hostname solr
docker exec -u i2analyze solr2 /opt/IBM/i2analyze/toolkit/scripts/setup -t stopSolrNodes --hostname solr2

docker exec -u i2analyze solr /opt/IBM/i2analyze/toolkit/scripts/setup -t startSolrNodes --hostname solr
docker exec -u i2analyze solr2 /opt/IBM/i2analyze/toolkit/scripts/setup -t startSolrNodes --hostname solr2

if [[ $dbDialect == "db2" ]]; then
    # Resetting the DB2COMM property in the db2 server
    docker exec -u db2inst1 db2 db2set DB2COMM=tcpip

    # Recataloging the database on the admin_client container
    docker exec -u i2analyze admin_client /opt/IBM/i2analyze/toolkit/scripts/setup -t recatalogRemoteDB2Nodes
    docker exec -u i2analyze admin_client /opt/IBM/i2analyze/toolkit/scripts/setup -t recatalogDB2Databases

    # Recataloging the database on the liberty container
    docker exec -u i2analyze liberty /opt/IBM/i2analyze/toolkit/scripts/setup -t recatalogRemoteDB2Nodes
    docker exec -u i2analyze liberty /opt/IBM/i2analyze/toolkit/scripts/setup -t recatalogDB2Databases
elif [[ $dbDialect == "sqlserver" ]]; then
    # Resetting the connection properties in the sqlserver server
    docker exec -t sqlserver /opt/mssql/bin/mssql-conf unset network.tlscert
    docker exec -t sqlserver /opt/mssql/bin/mssql-conf unset network.tlskey
    docker exec -t sqlserver /opt/mssql/bin/mssql-conf unset network.tlsprotocols
    docker exec -t sqlserver /opt/mssql/bin/mssql-conf unset network.forceencryption
fi

# Deploying liberty
docker exec -u i2analyze liberty /opt/IBM/i2analyze/toolkit/scripts/setup -t deployLiberty

if [[ $dbDialect == "db2" ]]; then
    # Restart db2
    docker exec -u db2inst1     db2         db2stop
    docker exec -u db2inst1     db2         db2start
elif [[ $dbDialect == "sqlserver" ]]; then
    # Restart sqlserver
    docker restart sqlserver
fi

# Starting liberty
docker exec -u i2analyze liberty /opt/IBM/i2analyze/toolkit/scripts/setup -t startLiberty

popd
